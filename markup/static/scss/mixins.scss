@mixin screen($size) {
    $desktop: "(min-width: 1024px)";
    $tablet: "(min-width: 768px) and (max-width: 1023px)";
    $mobile: "(max-width: 767px)";
    @if $size == desktop {
        @media only screen and #{$desktop} {
            @content;
        }
    }
    @else if $size == tablet {
        @media only screen and #{$tablet} {
            @content;
        }
    }
    @else if $size == mobile {
        @media only screen and #{$mobile} {
            @content;
        }
    }
    @else {
        @media only screen and #{$size} {
            @content;
        }
    }
}

// Usage
// .wrapper {
//   margin: 0 auto;
//   width: 100%;
//   @include screen('tablet') {
//     width: 90%;
//   }

//   @include screen('desktop') {
//     width: 85%;
//   }
// }
// .wrapper {
//   @include screen('(min-width: 1367px)') {
//     width: 1280px;
//   }
// }


@mixin retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
        @content;
    }
}


@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
    @include position(absolute, $args);
}

@mixin fixed($args: '') {
    @include position(fixed, $args);
}

@mixin relative($args: '') {
    @include position(relative, $args);
}

// Usage
// You should only use absolute(), relative(), and fixed() functions to add the respective positioning to the elements. Parameters are optional and can be given as demonstrated below:

// .menu li {
//   @include relative;
// }

// .sub-menu {
//   @include absolute(top 100% left 0);
// }

// .sticky-bar {
//   @include fixed(top 0 left 0);
// }

// Mixins.

@mixin cf {
    &:before,
    &:after {
        display: table;
        content: "";
    }

    &:after {
        clear: both;
    }

    .lt-ie8 & {
        zoom: 1;
    }
}

@mixin no-drag {
    -webkit-user-drag: none;
    -khtml-user-drag: none;
    -moz-user-drag: none;
    -o-user-drag: none;
    user-drag: none;
}

@mixin nl {
    margin: 0;
    padding: 0;
    text-indent: 0;
    list-style: none;
    list-style-position: outside;
}

@mixin selection {
    & ::selection {
        @content;
    }
    & ::-moz-selection {
        @content;
    }
}

@mixin calc($property, $expression) {
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

@mixin placeholder-color($color) {
    &.placeholder {
        color: $color;
    }
    &::-moz-placeholder {
        color: $color;
    }
    &::-webkit-input-placeholder {
        color: $color;
    }
}

@mixin unselectable() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

// @include font-size(14px) => font-size: 14px; font-size: 0.8rem;
@function calculateRem($size) {
    $remSize: $size / 16px; // 16px is a $base unit
    @return $remSize * 1rem;
}
@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

// old browsers opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity = $opacity-ie); //IE8
}